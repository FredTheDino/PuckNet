use assets
use util

Mupp :: blob {
    pos: (float, float),
    bobbiness: float,
    rgb: (float, float, float),
    sprite: int,
}

muppets:[Mupp]: []
init :: fn {
    place_mupps :: fn lo_x: float, hi_x: float, lo_y: float, hi_y: float {
        y := hi_y
        loop y > lo_y {
            x := lo_x
            loop x < hi_x {
                muppets -> push' Mupp {
                    pos: (x + 0.5 * rem(y, 2.0), y) + (l_random_range(-0.5, 0.5), l_random_range(-0.5, 0.5)),
                    bobbiness: l_random_range(0.1, 0.5),
                    rgb: (l_random_range(0.2, 0.4), l_random_range(0.2, 0.4), l_random_range(0.2, 0.4)),
                    sprite: l_random_range(0, 3),
                }
                x += 1.0
            }
            y -= 1.0
        }
    }

    place_mupps(-45.5, -26.0, -20.0,  20.0)
    place_mupps( 26.0,  45.5, -20.0,  20.0)
    place_mupps(-26.0,  26.0, -20.0, -13.0)
}

exitement := 0.0

add_exitement :: fn delta: float {
    exitement += delta
}

t := 0.0
draw :: fn {
    if !debug_assertions() {

        exitement = exitement * pow(0.2, l_delta())
        t += l_delta() * (1.0 + exitement * 7.0) * 5.0

        muppets -> for_each(fn m: Mupp {
            mupp :: assets.mupps[m.sprite]
            scale :: as_float(mupp[1][1]) / as_float(mupp[1][0])
            uni_scale :: 0.1
            pos :: 0.08 * m.pos + (0.0, 0.1 * m.bobbiness * sin(m.bobbiness * 100.0 + t * m.bobbiness))
            l_gfx_sprite(mupp[0], (0, 0), pos, (uni_scale) * (1.0, scale), m.rgb)
        })
    }
}
