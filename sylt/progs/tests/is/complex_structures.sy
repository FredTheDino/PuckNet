A :: blob {
    a: int,
    b: A,
}

B :: blob {
    a: int,
    b: B,
}

:B is :A
:A is :B

C :: blob {
    a: int,
    b: fn C -> C,
}

D :: blob {
    a: int,
    b: fn D -> D,
}

:D is :C
:C is :D

Q :: blob {
    a: int,
}

:A is :Q 
:B is :Q 
:C is :Q 
:D is :Q 

:(int, int, int) is :(int, int, int)
:[int | int] is :[int]

:(A, B, C, D) is :(Q, Q | A, Q, Q | D)
:(Q | A, B, C, D) is :(Q | A, Q | A, Q, Q | D)

start :: fn { }

