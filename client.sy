use config
use game

new_client_state :: fn ip: str -> game.GameState {
    print ip
    n_rpc_connect' ip, config.SERVER_PORT
    n_rpc_server' game.player_join

    update_ticker := game.tick.ticker_new' 60.0
    self : !game.GameState = nil
    input : game.entity.Input? = nil
    game_ := game.new_game()

    recv_done :: fn -> bool {
        game_.player_id in game_.players
    }

    self = game.GameState {
        game: game_,
        name: "PuckNET Client",
        update: fn delta: float {
            if recv_done() {
                self.game.update' delta
            }
        },
        draw: fn {
            if recv_done() {
                self.game.draw'
                self.game -> game.move_camera'
            }
        },
        process_input: fn {
            if recv_done() {
                new_input := game.poll_input'
                new_input.player = self.game.player_id
                if input is nil {
                    input = new_input
                } else {
                    input_: !game.entity.Input = input
                    input = game.merge_inputs(input_, new_input)
                }

                //TODO(gu): delta parameter?
                if update_ticker.next(l_delta()) {
                    n_rpc_server' game.set_input, input
                    input = nil
                }

                self.game.process_input'
            }
        },
        cleanup: fn {},
    }
    ret self
}
