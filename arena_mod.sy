use assets
use collision
use game

Arena :: blob {
    draw: fn -> void,
    update: fn float -> void,
    walls: [collision.Wall],
    corners: [collision.Circle],
    goals: [collision.Circle],
}

:Arena is :game.Entity

arena_new :: fn pos: (float, float) -> Arena {
    pos :: (0.0, 0.0)
    scale :: 2.0

    r :: scale / 5.0
    x :: 0.80 * scale
    y :: 0.30 * scale

    self: !Arena = nil
    self = Arena{
        draw: fn -> void {

            t :: rem' 0.1 * l_time(), 4.0 * scale

            l_gfx_sprite' assets.ads, (0, 0), pos + (t, (scale - 0.2) / 1.5), (4.0, 4.0 * 20.0 / 401.0) * scale
            l_gfx_sprite' assets.ads, (0, 0), pos + (t - 4.0 * scale, (scale - 0.2) / 1.5), (4.0, 4.0 * 20.0 / 401.0) * scale

            l_gfx_sprite' assets.ads, (0, 0), pos + (t - 4.0 * scale, (scale - 0.2) / 1.5), (4.0, 4.0 * 20.0 / 401.0) * scale

            l_gfx_rect' -scale * 1.3, 0.0, scale, 3.0, (0.0, 0.0, 0.0)
            l_gfx_rect' scale * 1.3, 0.0, scale, 3.0, (0.0, 0.0, 0.0)

            l_gfx_sprite' assets.arena, (0, 0), pos, (2.0, 1.0) * scale
            l_gfx_sprite' assets.border, (0, 0), pos + (0.0, scale / 2.0), (2.0, 2.0 * 40.0 / 200.0) * scale
        },
        update: fn delta: float {
        },
        walls: [
            collision.Wall{ normal: (0.0, -1.0), pos: (0.0,  scale / 2.0) },
            collision.Wall{ normal: (0.0,  1.0), pos: (0.0, -scale / 2.0) },
            collision.Wall{ normal: (-1.0, 0.0), pos: ( scale,       0.0) },
            collision.Wall{ normal: ( 1.0, 0.0), pos: (-scale,       0.0) },
        ],
        corners: [
            // Radius is negative because of collisions inside of the circle
            collision.Circle { rad: -r, pos: (-x,  y) },
            collision.Circle { rad: -r, pos: (-x, -y) },
            collision.Circle { rad: -r, pos: ( x, -y) },
            collision.Circle { rad: -r, pos: ( x,  y) },
        ],
        goals: [
            collision.Circle { rad: scale / 11.0, pos: (x, y) *  0.85 },
            collision.Circle { rad: scale / 11.0, pos: (x, y) * -0.85 },
        ],
    }

    ret self
}
