use entity
use game
use mupps
use collision

goal_parts := ("", 0)

goal :: fn pos: (float, float) {
    l_gfx_particle_vel_magnitude' goal_parts, (0.2, 1.2)
    l_gfx_particle_x(goal_parts, (pos[0], pos[0]))
    l_gfx_particle_y(goal_parts, (pos[1], pos[1]))
    l_gfx_particle_spawn(goal_parts, 400)
    l_gfx_particle_vel_magnitude' goal_parts, (0.2, 0.3)

    mupps.add_exitement' 5.0
}

goal_small :: fn pos: (float, float) {
    l_gfx_particle_x(goal_parts, (pos[0], pos[0]))
    l_gfx_particle_y(goal_parts, (pos[1], pos[1]))
    l_gfx_particle_spawn(goal_parts, 10)
}

skate_parts := ("", 0)

skate :: fn player: collision.CircleBody {
    offset :: (0., -player.rad) / 2.

    if l_random() < l_delta() * 20. && magnitude_squared(player.vel) > 0.001 {
        l_gfx_particle_x(skate_parts, (player.pos[0], player.pos[0]) + offset)
        l_gfx_particle_y(skate_parts, (player.pos[1], player.pos[1]) + offset)

        l_gfx_particle_spawn(skate_parts, 1)
    }
}

dash :: fn player: entity.Player {
    offset :: (0., -player.rad) / 2.

    l_gfx_particle_x(skate_parts, (player.pos[0], player.pos[0]) + offset)
    l_gfx_particle_y(skate_parts, (player.pos[1], player.pos[1]) + offset)

    l_gfx_particle_vel_angle(skate_parts, (player.rot - 0.1, player.rot + 0.1))
    l_gfx_particle_vel_magnitude(skate_parts, (-0.30, 0.05))

    l_gfx_particle_spawn(skate_parts, 40)

    l_gfx_particle_vel_magnitude(skate_parts, (0.01, 0.01))
    l_gfx_particle_vel_angle(skate_parts, (0.0, 0.0))
}

turn :: fn player: entity.Player, rotation: float {
    offset :: (0., -player.rad) / 2.
    l_gfx_particle_x(skate_parts, (player.pos[0], player.pos[0]) + offset)
    l_gfx_particle_y(skate_parts, (player.pos[1], player.pos[1]) + offset)

    angle :: player.rot - sign(rotation) * 3.14 / 2.0
    l_gfx_particle_vel_angle(skate_parts, (angle - 0.3, angle + 0.3))

    vel :: magnitude_squared(player.vel)
    l_gfx_particle_vel_magnitude(skate_parts, (0.40 * vel, 0.50 * vel))

    size :: 0.015
    l_gfx_particle_start_sx(skate_parts, (size, size))
    l_gfx_particle_start_sy(skate_parts, (size, size))
    l_gfx_particle_end_sx(skate_parts, (size, size))
    l_gfx_particle_end_sy(skate_parts, (size, size))

    if l_random() < l_delta() * 50. && vel > 0.001 {
        l_gfx_particle_spawn(skate_parts, 2)
    }

    l_gfx_particle_start_sx(skate_parts, (0.02, 0.02))
    l_gfx_particle_start_sy(skate_parts, (0.02, 0.02))
    l_gfx_particle_end_sx(skate_parts, (0.02, 0.02))
    l_gfx_particle_end_sy(skate_parts, (0.02, 0.02))

    l_gfx_particle_vel_magnitude(skate_parts, (0.01, 0.01))
    l_gfx_particle_vel_angle(skate_parts, (0.0, 0.0))
}


init :: fn {
    goal_parts = l_gfx_particle_new'
    skate_parts = l_gfx_particle_new'

    l_gfx_particle_vel_angle(goal_parts, (0.0, 9.0))
    l_gfx_particle_vel_magnitude(goal_parts, (0.2, 0.3))
    l_gfx_particle_acc_magnitude(goal_parts, (0.0, 0.0))
    l_gfx_particle_drag(goal_parts, (0.9, 0.9))
    l_gfx_particle_start_sx(goal_parts, (0.02, 0.02))
    l_gfx_particle_start_sy(goal_parts, (0.02, 0.02))
    l_gfx_particle_end_sx(goal_parts, (0.02, 0.02))
    l_gfx_particle_end_sy(goal_parts, (0.02, 0.02))

    l_gfx_particle_vel_magnitude(skate_parts, (0.01, 0.01))
    l_gfx_particle_acc_magnitude(skate_parts, (0.0, 0.0))
    l_gfx_particle_start_sx(skate_parts, (0.02, 0.02))
    l_gfx_particle_start_sy(skate_parts, (0.02, 0.02))
    l_gfx_particle_end_sx(skate_parts, (0.02, 0.02))
    l_gfx_particle_end_sy(skate_parts, (0.02, 0.02))
    l_gfx_particle_start_red(skate_parts, (0.7, 0.7))
    l_gfx_particle_end_red(skate_parts, (0.7, 0.7))
    l_gfx_particle_start_green(skate_parts, (0.8, 0.8))
    l_gfx_particle_end_green(skate_parts, (0.8, 0.8))
    l_gfx_particle_start_blue(skate_parts, (0.8, 0.8))
    l_gfx_particle_end_blue(skate_parts, (0.8, 0.8))
    l_gfx_particle_start_alpha(skate_parts, (1.0, 1.0))
    l_gfx_particle_end_alpha(skate_parts, (0.0, 0.0))
}

update :: fn delta: float {
    l_gfx_particle_update' goal_parts, delta
    l_gfx_particle_update' skate_parts, delta
}

render :: fn {
    l_gfx_particle_render' goal_parts
    l_gfx_particle_render' skate_parts
}
