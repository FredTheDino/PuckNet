use assets
use game
use entity
use text

MOVE_REPEAT := 5.        // per second
MOVE_REPEAT_DELAY := 0.4 // seconds

MenuInput :: blob {
    up: bool,
    down: bool,
    left: bool,
    right: bool,
    select: bool,
}

from_input :: fn input: entity.Input -> MenuInput {
    ANALOG_CUTOFF :: 0.5
    MenuInput {
        up: input.dir[1] > ANALOG_CUTOFF,
        down: input.dir[1] < -ANALOG_CUTOFF,
        left: input.dir[0] > ANALOG_CUTOFF,
        right: input.dir[0] < -ANALOG_CUTOFF,
        select: input.select,
    }
}

Menu :: blob {
    lines: [str],
    line_index: int,
    line_selected: bool,

    cur_move_cooldown: float,
    move_repeating: bool,

    process_input: fn MenuInput -> bool,
    update: fn float -> void,
    draw: fn -> void,
}

menu_new :: fn lines: [str], title: str -> Menu {
    self: !Menu = nil
    self = Menu {
        lines: lines,
        line_index: 0,
        line_selected: false,

        cur_move_cooldown: 0.,
        move_repeating: false,

        process_input: fn input: MenuInput -> bool {
            should_process := false
            if input.up || input.down || input.left || input.right {
                if self.cur_move_cooldown == 0. {
                    should_process = true
                    if self.move_repeating {
                        self.cur_move_cooldown = 1. / MOVE_REPEAT
                    } else {
                        self.cur_move_cooldown = MOVE_REPEAT_DELAY
                        self.move_repeating = true
                    }
                    // we're cooled down, so do some movement
                } else {
                    // we're still cooling down, so no movement
                }
            } else {
                // Cool down if no movement
                self.cur_move_cooldown = 0.
                self.move_repeating = false
            }

            if should_process {
                assets.random_bloop'
                if input.up {
                    self.line_index -= 1
                } else if input.down {
                    self.line_index += 1
                }
                self.line_index = rem(self.line_index, len(self.lines) if > 0 else 1)
            }

            self.line_selected = input.select
            ret should_process
        },
        update: fn delta: float {
            self.cur_move_cooldown -= delta
            if self.cur_move_cooldown < 0. {
                self.cur_move_cooldown = 0.
            }
        },
        draw: fn {
            game.reset_camera'
            l_gfx_sprite' assets.menu, (0, 0), (0., 0.), (2., 2.)
            y := 0.5

            if title != "" {
                shadow :: 0.01
                text.draw_text' 0.0 + shadow, .65 - shadow, 2.0, title, (0., .0, .0, 1.)
                text.draw_text' 0.0, 0.65, 2.0, title, (.8, 0., 0., 1.)
                y = 0.35
            }

            i := 0
            loop i < len(self.lines) {
                color := (0.8, 0., 0., 1.) if i == self.line_index else (0., 0., 0., 1.)
                if i == self.line_index {
                    shadow :: 0.005
                    text.draw_text' 0.0 + shadow, y - shadow, 1.0, self.lines[i], (.0, .0, .0, 1.)
                }
                text.draw_text' 0.0, y, 1.0, self.lines[i], color
                y -= 0.2
                i += 1
            }
        },
    }
    ret self
}
