use arena_mod
use assets
use collision
use particles
use tick
use mupps

pi :: 3.14159265358979

clamp :: fn v: float, lo: float, hi: float -> float {
    min' hi, max' lo, v
}

dir :: fn rot: float -> (float, float) {
    (cos(rot), sin(rot))
}

angle_distance :: fn a: float, b: float -> float {
    angle' dir' b - a
}

friction :: fn v: (float, float), f: float -> (float, float) {
    if magnitude(v) <= f {
        ret (0.0, 0.0)
    } else {
        ret v - normalize(v) * f
    }
}

Entity :: blob {
    draw: fn -> void,
    update: fn float -> void,
}

Input :: blob {
    dir: (float, float),
    tackle: bool,
    shoot: bool,
    charge: bool,
    player: int,
}

Player :: blob {
    mass: float,
    rad: float,
    pos: (float, float),
    vel: (float, float),
    rot: float,
    acc: float,
    charge: float,
    puck: Puck?,
    try_grab: fn Puck -> void,
    tackle_timer: float,
    input: Input?,
    draw: fn -> void,
    process_input: fn float -> void,
    update: fn float -> void,
}

player_new :: fn pos: (float, float), team: int -> Player {

    sprites :: assets.player1 if team == 0 else assets.player2

    self: !Player = nil
    self = Player {
        mass: 100.0,
        rad: 0.05,
        pos: pos,
        rot: 0.0,
        vel: (0.0, 0.0),
        acc: 0.0,
        charge: 0.0,
        puck: nil,
        try_grab: fn puck: Puck -> void {
            if (magnitude(self.pos - puck.pos) < 0.05
                && puck.holder is nil
                && puck.hold_cooldown == 0.0) {
                self.puck = puck
                puck.holder = self
            }
        },
        tackle_timer: 0.0,
        input: nil,
        draw: fn -> void {
            segment :: ((1 if self.rot > 1./4. * pi else 0) +
                        (1 if self.rot > 3./4. * pi else 0) +
                        (1 if self.rot > 5./4. * pi else 0) -
                        (3 if self.rot > 7./4. * pi else 0))
            sprite :: sprites[segment]
            widths :: [-12.0, 13.0, 12.0, 13.0]
            width :: widths[segment]
            height :: 15.
            scale :: 3.
            offset :: (0., self.rad)

            // Hitbox
            // l_gfx_rect' self.pos, (self.rad, self.rad) * 2., self.rot, (0., 0., 0.)

            // Puck (if held)
            puck_offsets :: [(1.0, 0.0), (1.0, 0.0), (-1.0, 0.0), (-1.0, -0.5)]
            puck_before :: segment < 3

            // Puck (if held)
            if (puck_before && self.puck is :Puck) {
                p: !Puck = self.puck
                p.pos += puck_offsets[segment] * self.rad
                p.draw'
                p.pos -= puck_offsets[segment] * self.rad
            }

            l_gfx_sprite' sprite, (0, 0), self.pos + offset, (width, height) / height * self.rad * scale

            // Puck (if held)
            if (!puck_before && self.puck is :Puck) {
                p: !Puck = self.puck
                p.pos += puck_offsets[segment] * self.rad
                p.draw'
                p.pos -= puck_offsets[segment] * self.rad
            }
        },
        process_input: fn delta: float -> void {
            if self.input is nil {
                ret
            }
            input: !Input = self.input

            if self.puck is :Puck {
                if input.shoot && self.puck is :Puck {
                    shoot_speed :: max(sin(0.15 + self.charge * 2.0) * 1.2, -1.0) + 1.5

                    puck: !Puck = self.puck
                    puck.vel = dir(self.rot) * shoot_speed
                    puck.hold_cooldown = 0.1
                    puck.holder = nil
                    self.puck = nil
                    self.charge = 0.0
                }

                if input.charge {
                    self.charge += delta
                    break_fric :: 3.0
                    self.vel = friction' self.vel, break_fric * delta
                } else {
                    self.charge = 0.0
                }
            }

            if self.tackle_timer == 0.0 && input.tackle && self.puck is nil {
                self.tackle_timer = 1.0
                self.vel += dir(self.rot) * 2.0
            }

            if self.tackle_timer > 0.5 {
                input.dir = (0.0, 0.0)
            }

            force :: 3.0
            self.acc += force * magnitude' input.dir

            // Rotation
            max_rotation :: 4.0 + 6.0 / (2.0 * magnitude(input.dir) + 0.1) // rad/sec
            rotation_speed :: 2.0 * 3.14

            direction_angle :: angle(input.dir) if input.dir != (0.0, 0.0) else self.rot
            delta_angle :: angle_distance' self.rot, direction_angle
            rotation :: clamp' delta_angle * rotation_speed, -max_rotation, max_rotation
            self.rot += rotation * delta
            self.rot = rem' self.rot, 2. * pi
        },
        update: fn delta: float -> void {
            self.tackle_timer = max' 0.0, self.tackle_timer - delta

            // Linear motion
            self.vel += dir(self.rot) * self.acc * delta
            self.acc = 0.0

            // Air resistance
            air_fric :: 0.20 - self.tackle_timer * 0.1
            self.vel *= pow' air_fric, delta

            // Friction
            ice_fric :: 0.8
            self.vel = friction' self.vel, ice_fric * delta

            // Puck
            if self.puck is :Puck {
                puck: !Puck = self.puck
                puck.pos = self.pos
                // Without velocity the collisions won't work...
                puck.vel = self.vel
            }

            // Particles
            particles.skate' self
        }
    }
    ret self
}

:Player is :Entity
:Player is :collision.Circle
:Player is :collision.Body
:Player is :collision.CircleBody

Puck :: blob {
    mass: float,
    rad: float,
    pos: (float, float),
    vel: (float, float),
    holder: Player?,
    hold_cooldown: float,
    draw: fn -> void,
    update: fn float -> void,
}

// we might need to tweek mass numbers
puck_new :: fn pos: (float, float) -> Puck {
    circle_rad :: 0.02
    self: !Puck = nil
    self = Puck{
        mass: 0.5,
        rad: sqrt(circle_rad * circle_rad * 2.0),
        pos: pos,
        vel: (0.0, 0.0),
        holder: nil,
        hold_cooldown: 0.0,
        draw: fn -> void {
            rad :: (circle_rad, circle_rad) * 2.0
            width :: 7.
            height :: 6.
            l_gfx_sprite' assets.puck, (0, 0), self.pos, (width, height) / height * self.rad * 1.65
        },
        update: fn delta: float -> void {
            // Pickup cooldown
            self.hold_cooldown = max' self.hold_cooldown - delta, 0.0

            // Friction
            ice_fric :: 1.0
            speed :: magnitude' self.vel
            self.vel = friction' self.vel, ice_fric * delta
        }
    }
    ret self
}

:Puck is :Entity
:Puck is :collision.Circle
:Puck is :collision.Body
:Puck is :collision.CircleBody

// TODO(ed): Make this into a {int:[Player]} - so we
// can drop connections smoothly? Or no?
players : [Player] = []
entities : [Entity] = []

puck : Puck = puck_new' (0.0, 0.0)
bodies : [collision.CircleBody] = []
arena: arena_mod.Arena = arena_mod.arena_new' (0.0, 0.0)

bind_keys :: fn {
    l_bind_key("w", "up")
    l_bind_key("a", "left")
    l_bind_key("s", "down")
    l_bind_key("d", "right")
    l_bind_key("q", "swap_player")
    l_bind_key("SPACE", "shoot")

    l_bind_axis(0, "LEFTX", "right")
    l_bind_axis(0, "LEFTY", "down")
    l_bind_button(0, "Y", "swap_player")
    l_bind_button(0, "A", "shoot")

    l_bind_quit("quit")
    l_bind_key("ESCAPE", "quit")
}

init :: fn {
    push' entities, puck
    push' bodies, puck
    mupps.init'
    particles.init'
    assets.load_assets'
}

num_players := 0
player_join :: fn {
    // TODO(ed): This is a bad idea - since we can
    // have a race condition here.
    // We probably want to respond to ONLY that client.
    n_rpc_clients' assign_player_id, num_players

    [0, 1] -> for_each' fn _:int {
        player := player_new' (l_random_range(-0.5, 0.5), l_random_range(-0.5, 0.5)), _
        push' players, player
        push' entities, player
        push' bodies, player
    }
    num_players += 1
}

assign_player_id :: fn id:int {
    if player_id == -1 {
        player_id = id
    }
}

servers: {str} = {}
broadcast_server :: fn ip:str {
    add' servers, ip
    n_rpc_clients' set_servers, servers
}

set_servers :: fn incoming_servers:{str} {
    servers = incoming_servers
    print servers
}

current_player := 0
player_id := -1
poll_input :: fn -> Input {
    if l_input_pressed("swap_player") {
        current_player += 1
        current_player = rem' current_player, 2
    }

    if player_id != -1 {
        a :: 2 * player_id + current_player
        b :: 2 * player_id + rem' current_player + 1, 2
        delta_x :: abs' players[a].pos[0] - players[b].pos[0]
        weight :: min' 1.0, 0.4 + delta_x * 0.5
        x :: -(players[a].pos[0] * weight + players[b].pos[0] * (1.0 - weight))
        curr_x :: l_gfx_camera_at()[0]

        speed :: min' 1.0, 4.0 * l_delta'
        x :: x * speed + curr_x * (1.0 - speed)
        l_gfx_camera_place' x, 0.0
        l_gfx_camera_set_zoom' 0.7
    }

    Input {
        dir: normalize((l_input_value("right") - l_input_value("left"),
                        l_input_value("up")    - l_input_value("down"))),

        tackle: l_input_pressed("shoot"),
        charge: l_input_down("shoot"),
        shoot: l_input_released("shoot"),

        player: 2 * player_id + current_player,
    }
}

set_input :: fn input: Input {
    if players[input.player].input is nil {
        players[input.player].input = input
    } else {
        player_input: !Input = players[input.player].input
        players[input.player].input = merge_inputs(player_input, input)
    }
}

merge_inputs :: fn current: Input, new: Input -> Input {
    if current.player != new.player {
        ret new
    } else {
        ret Input {
            dir: new.dir,
            charge: current.charge || new.charge,
            tackle: current.tackle || new.tackle,
            shoot: current.shoot || new.shoot,
            player: new.player,
        }
    }
}

clear_input :: fn input: Input -> Input {
    Input {
        dir: input.dir,
        charge: false,
        tackle: false,
        shoot: false,
        player: input.player,
    }
}

process_input :: fn delta: float {
    players -> for_each' fn p: Player {
        p.process_input' delta
        if p.input is :Input {
            input: !Input = p.input
            p.input = clear_input(input)
        }
    }
}

update :: fn delta: float -> void {
    players -> for_each' fn p: Player {
        p.try_grab' puck
    }

    iter := 1000
    t := 1.0
    loop t > 0.0 && iter > 0 {
        iter -= 1
        is_collision := false
        next_col := collision.Manifold {
            t: 2.0,
            normal: (0.0, 0.0),
            a: collision.Wall {
                pos: (0.0, 0.0),
                normal: (0.0, 0.0),
            },
            b: collision.Wall {
                pos: (0.0, 0.0),
                normal: (0.0, 0.0),
            },
        }

        // Find next collision
        a_i := 0
        // TODO(ed): Write this with for_each, when the upvalue bug is fixed.
        loop a_i < len(bodies) {
            a := bodies[a_i]
            b_i := -1
            bodies -> for_each' fn b: collision.CircleBody {
                b_i += 1
                // Skip the ones we've seen
                if a_i >= b_i {
                    ret
                }
                if a is :Puck || b is :Puck {
                    ret
                }
                col :: collision.circle_vs_circle' a, b, delta * t * (a.vel - b.vel)
                // TODO(ed): Don't capture other bodies.
                if col.t <= 0.0 || next_col.t < col.t {
                    ret
                }
                next_col = col
                is_collision = true
            }
            arena.walls -> for_each' fn w: collision.Wall {
                col :: collision.circle_vs_wall' a, w, delta * t * a.vel
                if col.t <= 0.0 || next_col.t < col.t {
                    ret
                }
                next_col = col
                is_collision = true
            }
            arena.corners -> for_each' fn c: collision.Circle {
                col :: collision.circle_vs_circle' a, c, delta * t * a.vel
                if col.t <= 0.0 || next_col.t < col.t {
                    ret
                }
                if (sign(col.normal[1]) == sign(c.pos[1])
                    || sign(col.normal[0]) == sign(c.pos[0])
                    || magnitude_squared(a.pos) < magnitude_squared(c.pos)) {
                    ret
                }
                next_col = col
                is_collision = true
            }

            // TODO(ed): For 100% accuracy - this needs to move out
            // of the loop, and be checked afterwards.
            if a is :Puck {
                arena.goals -> for_each' fn g: collision.Circle {
                    col :: collision.circle_vs_circle' a, g, delta * t * a.vel
                    if 0.0 <= col.t && col.t < t {

                        particles.goal' g.pos
                        n_rpc_clients' particles.goal, g.pos
                        puck.vel *= 0.0
                        puck.pos *= 0.0
                        if :Player is puck.holder {
                            holder: !Player = puck.holder
                            holder.puck = nil
                        }
                        puck.holder = nil
                    }
                }
            }
            a_i += 1
        }

        // Step up to the next collision
        step := min' t, next_col.t
        bodies -> for_each' fn c: collision.Body {
            c.pos += c.vel * step * delta
        }

        true <=> :collision.Body is :Player

        // Solve the collision
        if is_collision {
            // Elastic collision
            energy_kept :: 0.9
            n :: next_col.normal

            a :!collision.CircleBody = next_col.a
            if !:collision.CircleBody is a {
                a = collision.CircleBody{
                    mass: 0.0,
                    rad: 0.0,
                    pos: a.pos,
                    vel: (0.0, 0.0),
                }
            }
            b :!collision.CircleBody = next_col.b
            if !:collision.CircleBody is b {
                b = collision.CircleBody{
                    mass: 0.0,
                    rad: 0.0,
                    pos: b.pos,
                    vel: (0.0, 0.0),
                }
            }

            if :Player is a && :Player is b {
                a :!Player : a
                b :!Player : b
                if :Puck is a.puck && magnitude_squared(a.vel) < magnitude_squared(b.vel) {
                    b.puck = a.puck
                    puck: !Puck = b.puck
                    puck.holder = b
                    a.puck = nil
                }
                if :Puck is b.puck && magnitude_squared(a.vel) > magnitude_squared(b.vel) {
                    a.puck = b.puck
                    puck: !Puck = a.puck
                    puck.holder = a
                    b.puck = nil
                }
            }

            relative_v :: (1.0 + energy_kept) * (dot(a.vel, n) - dot(b.vel, n))
            tot_mass :: (a.mass + b.mass)

            skin :: 0.001
            a.pos += n * skin
            a.vel += n * -relative_v * a.mass / tot_mass
            b.pos -= n * skin
            b.vel += n * relative_v * b.mass / tot_mass
        }
        t -= step
    }
    if iter == 0 { <!> }

    entities -> for_each' fn e: Entity {
        e.update' delta
    }

    particles.update' delta
}

set_entities :: fn incoming_entities: [Entity], incoming_players: [Player] {
    entities = incoming_entities
    players = incoming_players
}

draw :: fn {
    arena.draw'
    particles.render'

    entities -> for_each' fn e: Entity {
        if !(e is :Puck) {
            e.draw'
        }
    }
    entities -> for_each' fn e: Entity {
        if e is :Puck {
            p: !Puck = e
            // The holder will draw the puck in the right place if there is one
            if p.holder is :void {
                e.draw'
            }
        }
    }

    arena.goals -> for_each' fn g: collision.Circle {
        particles.goal_small' g.pos
    }

    mupps.draw'
}

start :: fn {
    // Added for safety - to avoid delta=0
    l_update'

    l_set_window_size' (800, 800)

    init'
    [0, 1] -> for_each' fn _:int {
        player := player_new' (l_random_range(-0.5, 0.5), l_random_range(-0.5, 0.5)), _
        push' players, player
        push' entities, player
        push' bodies, player
    }
    num_players += 1
    player_id = 0

    bind_keys'
    loop !l_input_down("quit") {
        l_update'
        l_render'

        set_input' poll_input'
        process_input' l_delta'

        update' l_delta'
        draw'
    }
}
