Entity :: blob {
    draw: fn -> void,
    update: fn float -> void,
}

Player :: blob {
    pos: (float, float),
    vel: (float, float),
    acc: (float, float),
    draw: fn -> void,
    update: fn float -> void,
}

player_new :: fn pos: (float, float) -> Player {
    self: !Player = nil
    self = Player{
        pos: pos,
        vel: (0.0, 0.0),
        acc: (0.0, 0.0),
        draw: fn -> void {
            rgb :: (sin(l_time()), cos(l_time()), 0.0)
            l_gfx_rect' self.pos[0], self.pos[1], 1.0, 1.0, rgb
        },
        update: fn delta: float -> void {
            dx := (l_input_value("right") - l_input_value("left"))
            dy := (l_input_value("up") - l_input_value("down"))
            self.pos += (dx, dy) * (delta, delta)
        }
    }
    ret self
}

:Player is :Entity

entities : [Entity] = []

init :: fn {
    l_bind_key("w", "up")
    l_bind_key("a", "left")
    l_bind_key("s", "down")
    l_bind_key("d", "right")

    l_bind_quit("quit")
    l_bind_key("ESCAPE", "quit")

    push' entities, player_new' (0.0, 0.0)
}

update :: fn delta: float -> void {
    entities -> for_each' fn e: Entity {
        e.update' delta
    }
}

draw :: fn {
    entities -> for_each' fn e: Entity {
        e.draw'
    }
}

start :: fn {
    init'
    loop !l_input_down("quit") {
        l_update'
        l_render'
        update' l_delta'
        draw'
    }
}

