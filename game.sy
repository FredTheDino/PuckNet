use collision

clamp :: fn v: float, lo: float, hi: float -> float {
    min' hi, max' lo, v
}

dir :: fn rot: float -> (float, float) {
    (cos(rot), sin(rot))
}

angle_distance :: fn a: float, b: float -> float {
    angle' dir' b - a
}

friction :: fn v: (float, float), f: float -> (float, float) {
    if magnitude(v) <= f {
        ret (0.0, 0.0)
    } else {
        ret v - normalize(v) * f
    }
}

Entity :: blob {
    draw: fn -> void,
    update: fn float -> void,
}

Input :: blob {
    dir: (float, float),
    brake: bool,
    tackle: bool,
    shoot: bool,
    player: int,
}

Player :: blob {
    mass: float,
    rad: float,
    pos: (float, float),
    vel: (float, float),
    rot: float,
    acc: float,
    puck: Puck?,
    try_grab: fn Puck -> void,
    tackle_timer: float,
    draw: fn -> void,
    process_input: fn Input, float -> void,
    update: fn float -> void,
}

player_new :: fn pos: (float, float) -> Player {
    self: !Player = nil

    self = Player {
        mass: 100.0,
        rad: 0.1,
        pos: pos,
        rot: 0.0,
        vel: (0.0, 0.0),
        acc: 0.0,
        puck: nil,
        try_grab: fn puck: Puck -> void {
            if (magnitude(self.pos - puck.pos) < 0.05
                && !puck.held
                && puck.hold_cooldown == 0.0) {
                self.puck = puck
                puck.held = true
            }
        },
        tackle_timer: 0.0,
        draw: fn -> void {
            rgb :: (sin(l_time()), cos(l_time()), 1.0)
            l_gfx_rect' self.pos, (0.1, 0.1), self.rot, rgb
        },
        process_input: fn input: Input, delta: float -> void {

            shoot_speed :: self.vel + 2.0

            if input.shoot && self.puck is :Puck {
                puck: !Puck = self.puck
                puck.vel = dir(self.rot) * shoot_speed
                puck.held = false
                puck.hold_cooldown = 0.1
                self.puck = nil
            }

            if self.tackle_timer == 0.0 && input.tackle {
                self.tackle_timer = 1.0
                self.vel += 2.0
            }

            if self.tackle_timer > 0.5 {
                input.dir = (0.0, 0.0)
            }

            force :: 3.0
            self.acc += force * magnitude' input.dir

            break_fric :: 5.0
            if input.brake {
                self.vel = friction' self.vel, break_fric * delta
            }

            // Rotation
            max_rotation :: 4.0 + 6.0 / (2.0 * magnitude(input.dir) + 0.1) // rad/sec
            rotation_speed :: 2.0 * 3.14

            direction_angle :: angle(input.dir) if input.dir != (0.0, 0.0) else self.rot
            delta_angle :: angle_distance' self.rot, direction_angle
            rotation :: clamp' delta_angle * rotation_speed, -max_rotation, max_rotation
            self.rot += rotation * delta
        },
        update: fn delta: float -> void {
            self.tackle_timer = max' 0.0, self.tackle_timer - delta

            // Linear motion
            self.vel += dir(self.rot) * self.acc * delta
            self.acc = 0.0

            // Air resistance
            air_fric :: 0.20 - self.tackle_timer * 0.1
            self.vel *= pow' air_fric, delta

            // Friction
            ice_fric :: 0.8
            self.vel = friction' self.vel, ice_fric * delta

            // Puck
            if self.puck is :Puck {
                puck: !Puck = self.puck
                puck.pos = self.pos
                puck.vel = (0.0, 0.0)
            }
        }
    }
    ret self
}

:Player is :Entity
:Player is :collision.Circle
:Player is :collision.Body
:Player is :collision.CircleBody

Puck :: blob {
    mass: float,
    rad: float,
    pos: (float, float),
    vel: (float, float),
    held: bool,
    hold_cooldown: float,
    draw: fn -> void,
    update: fn float -> void,
}

// we might need to tweek mass numbers
puck_new :: fn pos: (float, float) -> Puck {
    self: !Puck = nil
    self = Puck{
        mass: 0.5,
        rad: 0.1,
        pos: pos,
        vel: (0.0, 0.0),
        held: false,
        hold_cooldown: 0.0,
        draw: fn -> void {
            rgb :: (1.0, 1.0, 1.0)
            l_gfx_rect' self.pos, (0.04, 0.04), 0.0, rgb
            l_gfx_rect' self.pos, (0.04, 0.04), 0.0 + 3.14 / 3.0, rgb
            l_gfx_rect' self.pos, (0.04, 0.04), 0.0 + 3.14 * 2.0 / 3.0, rgb
        },
        update: fn delta: float -> void {
            // Pickup cooldown
            self.hold_cooldown = max' self.hold_cooldown - delta, 0.0

            // Friction
            ice_fric :: 1.0
            speed :: magnitude' self.vel
            self.vel = friction' self.vel, ice_fric * delta
        }
    }
    ret self
}

:Puck is :Entity
:Puck is :collision.Circle
:Puck is :collision.Body
:Puck is :collision.CircleBody

// TODO(ed): Make this into a {int:[Player]} - so we
// can drop connections smoothly? Or no?
players : [Player] = []
entities : [Entity] = []

puck : Puck = puck_new' (0.0, 0.0)

bodies : [collision.CircleBody] = []
walls : [collision.Wall] = []
corners : [collision.Circle] = []

bind_keys :: fn {
    l_bind_key("w", "up")
    l_bind_key("a", "left")
    l_bind_key("s", "down")
    l_bind_key("d", "right")
    l_bind_key("SPACE", "brake")
    l_bind_key("e", "tackle")
    l_bind_key("q", "swap_player")
    l_bind_key("f", "shoot")

    l_bind_axis(0, "LEFTX", "right")
    l_bind_axis(0, "LEFTY", "down")
    l_bind_button(0, "A", "brake")
    l_bind_button(0, "B", "tackle")
    l_bind_button(0, "LEFTSHOULDER", "swap_player")

    l_bind_quit("quit")
    l_bind_key("ESCAPE", "quit")
}

init :: fn {
    push' entities, puck
    push' bodies, puck

    d := 0.8
    push' walls, collision.Wall {
        normal: (-1.0, 0.0),
        pos: (d, 0.0),
    }
    push' walls, collision.Wall {
        normal: (1.0, 0.0),
        pos: (-d, 0.0),
    }

    push' corners, collision.Circle {
        rad: d,
        pos: (0.0, 1.0 - d),
    }
    push' corners, collision.Circle {
        rad: d,
        pos: (0.0, -1.0 + d),
    }
}

num_players := 0
player_join :: fn {
    // TODO(ed): This is a bad idea - since we can
    // have a race condition here.
    // We probably want to respond to ONLY that client.
    n_rpc_clients' assign_player_id, num_players

    [0, 1] -> for_each' fn _:int {
        player := player_new' (l_random_range(-0.5, 0.5), l_random_range(-0.5, 0.5))
        push' players, player
        push' entities, player
        push' bodies, player
    }
    num_players += 1
}

assign_player_id :: fn id:int {
    if player_id == -1 {
        player_id = id
    }
}

current_player := 0
player_id := -1
poll_input :: fn -> Input {
    if l_input_pressed("swap_player") {
        current_player += 1
        current_player = rem' current_player, 2
    }
    Input {
        // TODO: Normalize this
        dir: (l_input_value("right") - l_input_value("left"),
              l_input_value("up")    - l_input_value("down")),

        brake: l_input_down("brake"),
        tackle: l_input_pressed("tackle"),
        shoot: l_input_pressed("shoot"),

        player: 2 * player_id + current_player,
    }
}

process_input :: fn input: Input {
    players[input.player].process_input' input, l_delta'
}

update :: fn delta: float -> void {
    players -> for_each' fn p: Player {
        p.try_grab' puck
    }

    iter := 1000
    t := 1.0
    loop t > 0.0 && iter > 0 {
        iter -= 1
        is_collision := false
        next_col := collision.Manifold {
            t: 2.0,
            normal: (0.0, 0.0),
            a: collision.Wall {
                pos: (0.0, 0.0),
                normal: (0.0, 0.0),
            },
            b: collision.Wall {
                pos: (0.0, 0.0),
                normal: (0.0, 0.0),
            },
        }

        // Find next collision
        a_i := 0
        // TODO(ed): Write this with for_each, when the upvalue bug is fixed.
        loop a_i < len(bodies) {
            a := bodies[a_i]
            b_i := -1
            bodies -> for_each' fn b: collision.CircleBody {
                b_i += 1
                // Skip the ones we've seen
                if a_i >= b_i {
                    ret
                }
                if a is :Puck || b is :Puck {
                    ret
                }
                col :: collision.circle_vs_circle' a, b, delta * t * (a.vel - b.vel)
                // TODO(ed): Don't capture other bodies.
                if col.t <= 0.0 || next_col.t < col.t {
                    ret
                }
                next_col = col
                is_collision = true
            }
            walls -> for_each' fn w: collision.Wall {
                col :: collision.circle_vs_wall' a, w, delta * t * a.vel
                if col.t <= 0.0 || next_col.t < col.t {
                    ret
                }
                next_col = col
                is_collision = true
            }
            corners -> for_each' fn c: collision.Circle {
                col :: collision.circle_vs_circle' a, c, delta * t * a.vel
                if col.t <= 0.0 || next_col.t < col.t {
                    ret
                }
                if sign(col.normal[1]) != sign(c.pos[1]) {
                    ret
                }
                next_col = col
                is_collision = true
            }
            a_i += 1
        }

        // Step up to the next collision
        step := min' t, next_col.t
        bodies -> for_each' fn c: collision.Body {
            c.pos += c.vel * step * delta
        }

        true <=> :collision.Body is :Player

        // Solve the collision
        if is_collision {
            // Elastic collision
            energy_kept :: 0.7
            n :: next_col.normal

            a :!collision.CircleBody = next_col.a
            if !:collision.CircleBody is a {
                a = collision.CircleBody{
                    mass: 0.0,
                    rad: 0.0,
                    pos: a.pos,
                    vel: (0.0, 0.0),
                }
            }
            b :!collision.CircleBody = next_col.b
            if !:collision.CircleBody is b {
                b = collision.CircleBody{
                    mass: 0.0,
                    rad: 0.0,
                    pos: b.pos,
                    vel: (0.0, 0.0),
                }
            }
            relative_v :: (1.0+energy_kept) * (dot(a.vel, n) - dot(b.vel, n))
            tot_mass :: (a.mass + b.mass)

            a.pos += n * 0.01
            a.vel += n * -relative_v * a.mass / tot_mass
            b.pos -= n * 0.01
            b.vel += n * relative_v * b.mass / tot_mass
        }
        t -= step
    }
    if iter == 0 { <!> }

    entities -> for_each' fn e: Entity {
        e.update' delta
    }
}

set_entities :: fn incoming_entities: [Entity] {
    entities = incoming_entities
}

draw :: fn {
    entities -> for_each' fn e: Entity {
        e.draw'
    }
}

start :: fn {
    // Added for safety - to avoid delta=0
    l_update'

    [0, 1] -> for_each' fn _:int {
        player := player_new' (l_random_range(-0.5, 0.5), l_random_range(-0.5, 0.5))
        push' players, player
        push' entities, player
        push' bodies, player
    }
    num_players += 1
    player_id = 0

    bind_keys'
    init'
    loop !l_input_down("quit") {
        l_update'
        l_render'
        process_input' poll_input'
        update' l_delta'
        draw'
    }
}
