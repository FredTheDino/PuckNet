use entity
use assets

Manifold :: blob {
    normal: (float, float),
    depth: float,
    a: CircleBody | Circle | Wall,
    b: CircleBody | Circle | Wall,
}

Circle :: blob {
    rad: float,
    pos: (float, float),
}

Wall :: blob {
    normal: (float, float),
    pos: (float, float),
}

Body :: blob {
    pos: (float, float),
    vel: (float, float),
}

CircleBody :: blob {
    mass: float,
    rad: float,
    pos: (float, float),
    vel: (float, float),
}

circle_vs_wall :: fn c: Circle, w: Wall -> Manifold {
    n :: w.normal

    Manifold {
        depth: dot(w.pos - c.pos, n) + c.rad,
        normal: n,
        a: c,
        b: w,
    }
}

circle_vs_circle :: fn a: Circle, b: Circle -> Manifold {
    distance :: a.pos - b.pos
    normal :: normalize' distance

    Manifold {
        normal: normal,
        depth: a.rad + b.rad - dot(distance, normal),
        a: a,
        b: b,
    }
}

circle_vs_in_circle :: fn a: Circle, b: Circle -> Manifold {
    distance :: b.pos - a.pos
    normal :: normalize' distance

    Manifold {
        normal: normal,
        depth: dot(distance, normal) + a.rad + b.rad,
        a: a,
        b: b,
    }
}

solve :: fn col: Manifold {
    // Elastic collision
    n :: col.normal

    a :!CircleBody = col.a
    if !:CircleBody is a {
        a = CircleBody {
            mass: 0.0,
            rad: 0.0,
            pos: a.pos,
            vel: (0.0, 0.0),
        }
    }
    b :!CircleBody = col.b
    if !:CircleBody is b {
        b = CircleBody {
            mass: 0.0,
            rad: 0.0,
            pos: b.pos,
            vel: (0.0, 0.0),
        }
    }

    if :entity.Puck is a || :entity.Puck is b {
        assets.random_plink()
    } else {
        assets.random_thudd()
    }

    // Should the puck action be handled here?
    if :entity.Player is a && :entity.Player is b {
        a :!entity.Player : a
        b :!entity.Player : b
        if :entity.Puck is a.puck && magnitude_squared(a.vel) < magnitude_squared(b.vel) {
            b.puck = a.puck
            puck: !entity.Puck = b.puck
            puck.holder = b
            a.puck = nil
        }
        if :entity.Puck is b.puck && magnitude_squared(a.vel) > magnitude_squared(b.vel) {
            a.puck = b.puck
            puck: !entity.Puck = a.puck
            puck.holder = a
            b.puck = nil
        }
    }

    energy_kept :: 0.9
    relative_v :: (1.0 + energy_kept) * (dot(a.vel, n) - dot(b.vel, n))
    tot_mass :: (a.mass + b.mass)

    if a.mass != 0. {
        a.pos += n * col.depth * a.mass / tot_mass
        a.vel += n * -relative_v * a.mass / tot_mass
    }
    if b.mass != 0. {
        b.pos -= n * col.depth * b.mass / tot_mass
        b.vel += n * relative_v * b.mass / tot_mass
    }
}
